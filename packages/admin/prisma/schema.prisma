// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  cart      Cart[]
  favorites Favorite[]
  reviews   Review[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Cart {
  id        Int    @id @default(autoincrement())
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Favorite {
  id        Int    @id @default(autoincrement())
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Review {
  id         Int    @id @default(autoincrement())
  title      String
  assessment Int
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Product {
  id            Int      @id @default(autoincrement())
  title         String   @unique
  description   String
  images        String
  price         Float
  volume        Int
  reviewsCount  Int
  averageRating Float
  categoryId    Int
  category      Category? @relation(fields: [categoryId], references: [id])
  brandId       Int
  brand         Brand?    @relation(fields: [brandId], references: [id])
  cart          Cart[]
  favorites     Favorite[]
  reviews       Review[]
  isReadyForSale Boolean                @default(false)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Brand {
  id    Int     @id @default(autoincrement())
  title String  @unique
  products Product[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Category {
  id    Int     @id @default(autoincrement())
  title String  @unique
  products Product[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Contact {
  id      Int     @id @default(autoincrement())
  title   String  @unique
  contact String  @unique
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Section {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  images      String
  content     String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}
